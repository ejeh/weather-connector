{"version":3,"sources":["../src/app.js"],"names":["dotenv","config","app","corsOptions","origin","credentials","use","bodyParser","urlencoded","extended","limit","json","express","path","join","__dirname","get","req","res","message","api","process","env","NODE_ENV","sendFile","resolve","next","error","Error","status"],"mappings":";;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AAVA;AASA;AAGAA,mBAAOC,MAAP;;AAEA,IAAMC,GAAG,GAAG,0BAAZ;AAEA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,MAAM,EAAE,uBADU;AAGlBC,EAAAA,WAAW,EAAE;AAHK,CAApB;AAMAH,GAAG,CAACI,GAAJ,CAAQ,sBAAKH,WAAL,CAAR,E,CAEA;AACA;;AACAD,GAAG,CAACI,GAAJ,CAAQC,uBAAWC,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE,IAAZ;AAAkBC,EAAAA,KAAK,EAAE;AAAzB,CAAtB,CAAR;AACAR,GAAG,CAACI,GAAJ,CAAQC,uBAAWI,IAAX,CAAgB;AAAED,EAAAA,KAAK,EAAE;AAAT,CAAhB,CAAR;AACAR,GAAG,CAACI,GAAJ,CAAQ,wBAAO,KAAP,CAAR;AAEAJ,GAAG,CAACI,GAAJ,CAAQM,8BAAeC,iBAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAf,CAAR,E,CAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACAb,GAAG,CAACc,GAAJ,CAAQ,MAAR,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC5BA,EAAAA,GAAG,CAACP,IAAJ,CAAS;AAAEQ,IAAAA,OAAO,EAAE;AAAX,GAAT;AACD,CAFD,E,CAIA;;AACAjB,GAAG,CAACI,GAAJ,CAAQ,SAAR,EAAmBc,eAAnB,E,CAEA;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACArB,EAAAA,GAAG,CAACI,GAAJ,CAAQM,8BAAe,cAAf,CAAR;AAEAV,EAAAA,GAAG,CAACc,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,IAAAA,GAAG,CAACM,QAAJ,CAAaX,iBAAKY,OAAL,CAAaV,SAAb,EAAwB,QAAxB,EAAkC,OAAlC,EAA2C,YAA3C,CAAb;AACD,GAFD;AAGD;;AAEDb,GAAG,CAACI,GAAJ,CAAQ,UAACW,GAAD,EAAMC,GAAN,EAAWQ,IAAX,EAAoB;AAC1B,MAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAU,YAAV,CAAd;AACAD,EAAAA,KAAK,CAACE,MAAN,GAAe,GAAf;AACAH,EAAAA,IAAI,CAACC,KAAD,CAAJ;AACD,CAJD;AAMAzB,GAAG,CAACI,GAAJ,CAAQ,UAACqB,KAAD,EAAQV,GAAR,EAAaC,GAAb,EAAkBQ,IAAlB,EAA2B;AACjCR,EAAAA,GAAG,CAACW,MAAJ,CAAWF,KAAK,CAACE,MAAN,IAAgB,GAA3B;AACAX,EAAAA,GAAG,CAACP,IAAJ,CAAS;AACPgB,IAAAA,KAAK,EAAE;AACLR,MAAAA,OAAO,qCAA8BQ,KAAK,CAACR,OAApC;AADF;AADA,GAAT;AAKAO,EAAAA,IAAI;AACL,CARD;eAUexB,G","sourcesContent":["// import dependencies\nimport express from \"express\";\nimport bodyParser from \"body-parser\";\nimport morgan from \"morgan\";\nimport mongoose from \"mongoose\";\nimport dotenv from \"dotenv\";\nimport path from \"path\";\nimport cors from \"cors\";\n\n// import routes\nimport api from \"./api\";\n\ndotenv.config();\n\nconst app = express();\n\nconst corsOptions = {\n  origin: \"http://localhost:3000\",\n\n  credentials: true\n};\n\napp.use(cors(corsOptions));\n\n// app.use(cookieParser());\n// app.use(helmet());\napp.use(bodyParser.urlencoded({ extended: true, limit: \"10mb\" }));\napp.use(bodyParser.json({ limit: \"10mb\" }));\napp.use(morgan(\"dev\"));\n\napp.use(express.static(path.join(__dirname, \"../public\")));\n\n// const database = process.env.DB_HOST;\n\n// // Configuring the database\n// mongoose.Promise = global.Promise;\n\n// // Connecting to the database\n// mongoose\n//   .connect(database, {\n//     useNewUrlParser: true,\n//     reconnectTries: Number.MAX_SAFE_INTEGER,\n//     reconnectInterval: 1000,\n//     poolSize: 5,\n//     socketTimeoutMS: 45000,\n//     autoReconnect: true\n//   })\n//   .then(() => {\n//     console.log(\"Successfully connected to the database!\");\n//   })\n//   .catch(err => {\n//     console.log(err, \"Could not connect to the database. Exiting now...\");\n//     process.exit();\n//   });\n\n// mongoose.set(\"useFindAndModify\", false);\n// mongoose.set(\"useCreateIndex\", true);\n\n// define a simple route\napp.get(\"/app\", (req, res) => {\n  res.json({ message: \"Welcome to Mock Weather Forcast.\" });\n});\n\n// Use Routes\napp.use(\"/api/v1\", api);\n\n// Serve as static assets if in production\nif (process.env.NODE_ENV === \"production\") {\n  // Set static folder\n  app.use(express.static(\"client/build\"));\n\n  app.get(\"*\", (req, res) => {\n    res.sendFile(path.resolve(__dirname, \"client\", \"build\", \"index.html\"));\n  });\n}\n\napp.use((req, res, next) => {\n  const error = new Error(\"Not found!\");\n  error.status = 404;\n  next(error);\n});\n\napp.use((error, req, res, next) => {\n  res.status(error.status || 500);\n  res.json({\n    error: {\n      message: `Weather Forcast API says ${error.message}`\n    }\n  });\n  next();\n});\n\nexport default app;\n"],"file":"app.js"}